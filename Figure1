# save StanFit 
#saveRDS(fit_Model_TIV, "Final_fitting_TIV.rds")
#saveRDS(fit_Model_IR, "Final_fitting_IR.rds")

fit_Model_TIV <- readRDS("Final_fitting_TIV.rds")
fit_Model_IR <- readRDS("Final_fitting_IR.rds")
print(fit_Model_TIV , pars = c("theta_WT"))
print(fit_Model_IR , pars = c("theta_WT"))

# extract posterior samples for selected parameters
posterior_samples_merged_after_burnin_TIV <-  rstan::extract(fit_Model_TIV , pars = c( "theta_WT",'sigma'))
posterior_samples_merged_after_burnin_IR_Sim <-  rstan::extract(fit_Model_IR , pars = c( "theta_WT",'sigma'))
#posterior_samples_merged_after_burnin_IR <-  rstan::extract(fit_Model_IR , pars = c( "theta_WT",'sigma'))

# show all marginal posterior distributions
posterior_sample_table_TIV <-   data.frame(epsilon1 = posterior_samples_merged_after_burnin_TIV$theta_WT[,1],
                                           beta = posterior_samples_merged_after_burnin_TIV$theta_WT[,2],
                                           delta_I = posterior_samples_merged_after_burnin_TIV$theta_WT[,3],
                                           p = posterior_samples_merged_after_burnin_TIV$theta_WT[,4],
                                           delta_V = posterior_samples_merged_after_burnin_TIV$theta_WT[,5],
                                           kappa_M = posterior_samples_merged_after_burnin_TIV$theta_WT[,6],
                                           epsilon2 = posterior_samples_merged_after_burnin_TIV$theta_WT[,7],
                                           delta_M = posterior_samples_merged_after_burnin_TIV$theta_WT[,8],
                                           phi = posterior_samples_merged_after_burnin_TIV$theta_WT[,9],
                                           s = posterior_samples_merged_after_burnin_TIV$theta_WT[,10])

posterior_sample_table_IR_Sim <-   data.frame(epsilon1 = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,1],
                                           beta = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,2],
                                           delta_I = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,3],
                                           p = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,4],
                                           delta_V = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,5],
                                           kappa_M = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,6],
                                           epsilon2 = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,7],
                                           delta_M = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,8],
                                           phi = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,9],
                                           s = posterior_samples_merged_after_burnin_IR_Sim$theta_WT[,10])

# plot and compare epsilon1 estimated from the two different models 
epsilon1_TIV <-  posterior_sample_table_TIV$epsilon1
epsilon1_IR_Sim <- posterior_sample_table_IR_Sim$epsilon1

epsilon1.df <- data.frame(epsilon1 = c(epsilon1_TIV, epsilon1_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(epsilon1_TIV))))
library(plyr)
epsilon1.mu <- ddply(epsilon1.df, "type", summarise, grp.mean=mean(epsilon1))
epsilon1.median <- ddply(epsilon1.df,"type", summarise, grp.median = quantile(epsilon1, 0.5))
#head(mu)
#head(median)
p.epsilon1 <- ggplot(epsilon1.df, aes(x=epsilon1, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .001, binwidth = 1/100)+
  geom_vline(aes(xintercept=epsilon1.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=epsilon1.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  theme(legend.position="top")+
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.epsilon1 +  stat_function(fun = function(x) {dunif(x, 0, 1)}, aes(color = 'prior')) +
    lims(x = c(0,1)) + xlab(TeX("$\\epsilon_1$")) + theme(text = element_text(size=23)) #epsilon1


# plot and compare epsilon2 
epsilon2_TIV <-  posterior_sample_table_TIV$epsilon2
epsilon2_IR_Sim <- posterior_sample_table_IR_Sim$epsilon2

epsilon2.df <- data.frame(epsilon2 = c(epsilon2_TIV, epsilon2_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(epsilon2_TIV))))
epsilon2.mu<- ddply(epsilon2.df, "type", summarise, grp.mean=mean(epsilon2))
epsilon2.median <- ddply(epsilon2.df,"type", summarise, grp.median = quantile(epsilon2, 0.5))
#head(mu)
#head(median)
p.epsilon2 <- ggplot(epsilon2.df, aes(x=epsilon2, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .001, binwidth = 1/100)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=epsilon2.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=epsilon2.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.epsilon2 +  stat_function(fun = function(x) {dunif(x, 0, 1)}, aes(color = 'prior')) +
  lims(x = c(0,1)) + xlab(TeX("$\\epsilon_2$")) + theme(text = element_text(size=23)) #epsilon2


# plot delta_V 
delta_V_TIV <-  posterior_sample_table_TIV$delta_V
delta_V_IR_Sim <- posterior_sample_table_IR_Sim$delta_V

delta_V.df <- data.frame(delta_V = c(delta_V_TIV, delta_V_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(delta_V_IR_Sim))))
delta_V.mu<- ddply(delta_V.df, "type", summarise, grp.mean=mean(delta_V))
delta_V.median <- ddply(delta_V.df,"type", summarise, grp.median = quantile(delta_V, 0.5))


p.delta_V <- ggplot(delta_V.df, aes(x=delta_V, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .01, binwidth = 1/2)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=delta_V.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=delta_V.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.delta_V +  stat_function(fun = function(x) {dlnorm(x, log(28.4), 1)}, aes(color = 'prior')) +
  lims(x = c(0,50)) + xlab(TeX("$\\delta_V$")) + theme(text = element_text(size=23))    # delta_V



# plot delta_I 
delta_I_TIV <-  posterior_sample_table_TIV$delta_I
delta_I_IR_Sim <- posterior_sample_table_IR_Sim$delta_I

delta_I.df <- data.frame(delta_I = c(delta_I_TIV, delta_I_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(delta_I_IR_Sim))))
delta_I.mu<- ddply(delta_I.df, "type", summarise, grp.mean=mean(delta_I))
delta_I.median <- ddply(delta_I.df,"type", summarise, grp.median = quantile(delta_I, 0.5))


p.delta_I <- ggplot(delta_I.df, aes(x=delta_I, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .01, binwidth = 1/10)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=delta_I.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=delta_I.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.delta_I +  stat_function(fun = function(x) {dlnorm(x, log(0.89), 1)}, aes(color = 'prior')) +
  lims(x = c(0,10)) +  xlab(TeX("$\\delta_I$")) + theme(text = element_text(size=23))     #delta_I



# plot delta_M 
delta_M_TIV <-  posterior_sample_table_TIV$delta_M
delta_M_IR_Sim <- posterior_sample_table_IR_Sim$delta_M

delta_M.df <- data.frame(delta_M = c(delta_M_TIV, delta_M_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(delta_I_IR_Sim))))
#delta_I.mu<- ddply(delta_I.df, "type", summarise, grp.mean=mean(delta_I))
delta_M.median <- ddply(delta_M.df,"type", summarise, grp.median = quantile(delta_M, 0.5))


p.delta_M <- ggplot(delta_M.df, aes(x=delta_M, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .01, breaks=seq(1e-5,3e-2,8e-4))+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=delta_M.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=delta_M.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.delta_M +  stat_function(fun = function(x) {dlnorm(x, log(4.2e-3), 1)}, aes(color = 'prior')) +
  lims(x = c(1e-5,3e-2))+  xlab(TeX("$\\delta_M$")) + theme(text = element_text(size=23))     #delta_I




# plot kappa_M
kappa_M_TIV <-  posterior_sample_table_TIV$kappa_M
kappa_M_IR_Sim <- posterior_sample_table_IR_Sim$kappa_M

kappa_M.df <- data.frame(kappa_M = c(kappa_M_TIV, kappa_M_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(kappa_M_IR_Sim))))
kappa_M.mu<- ddply(kappa_M.df, "type", summarise, grp.mean=mean(kappa_M))
kappa_M.median <- ddply(kappa_M.df,"type", summarise, grp.median = quantile(kappa_M, 0.5))


p.kappa_M <- ggplot(kappa_M.df, aes(x=log10(kappa_M), color = type)) +
  geom_histogram(aes(y = ..density..), fill = "white", position="dodge", alpha = .01, binwidth = 0.3)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=log10(kappa_M.median$grp.median[1])),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=log10(kappa_M.median$grp.median[2])),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.kappa_M +  stat_function(fun = function(x) {dnorm(x, -6, 4)}, aes(color = 'prior')) +
  lims(x = c(-15,5)) +  xlab(TeX("$\\log_{10}(\\kappa_M)$")) + theme(text = element_text(size=23))   #kappa_M




# plot beta
beta_TIV <-  posterior_sample_table_TIV$beta
beta_IR_Sim <- posterior_sample_table_IR_Sim$beta

beta.df <- data.frame(beta = c(beta_TIV, beta_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(beta_IR_Sim))))
beta.mu<- ddply(beta.df, "type", summarise, grp.mean=mean(beta))
beta.median <- ddply(beta.df,"type", summarise, grp.median = quantile(beta, 0.5))


p.beta <- ggplot(beta.df, aes(x=log10(beta), color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .01, binwidth = 1/20)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=log10(beta.median$grp.median[1])),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=log10(beta.median$grp.median[2])),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.beta+  stat_function(fun = function(x) {dnorm(x, -6, 4)}, aes(color = 'prior')) +
  lims(x = c(-6,-2)) +  xlab(TeX("$\\log_{10}(\\beta)$")) + theme(text = element_text(size=23))     #beta

# plot p

p_TIV <-  posterior_sample_table_TIV$p
p_IR_Sim <- posterior_sample_table_IR_Sim$p

p.df <- data.frame(p = c(p_TIV, p_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(beta_IR_Sim))))
p.mu<- ddply(p.df, "type", summarise, grp.mean=mean(p))
p.median <- ddply(p.df,"type", summarise, grp.median = quantile(p, 0.5))


p.p <- ggplot(p.df, aes(x=log10(p), color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .01, binwidth = 1/10)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=log10(p.median$grp.median[1])),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=log10(p.median$grp.median[2])),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.p +  stat_function(fun = function(x) {dnorm(x, -2, 4)}, aes(color = 'prior')) +
  lims(x = c(-6,2)) +  xlab(TeX("$\\log_{10}(\\p)$")) + theme(text = element_text(size=23))     #p


# plot s

s_TIV <-  posterior_sample_table_TIV$s
s_IR_Sim <- posterior_sample_table_IR_Sim$s

s.df <- data.frame(s = c(s_TIV, s_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(beta_IR_Sim))))
#s.mu<- ddply(p.df, "type", summarise, grp.mean=mean(p))
s.median <- ddply(s.df,"type", summarise, grp.median = quantile(s, 0.5))


p.s <- ggplot(s.df, aes(x=log10(s), color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .01, binwidth = 0.1)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=log10(s.median$grp.median[1])),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=log10(s.median$grp.median[2])),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.s +  stat_function(fun = function(x) {dnorm(x, 3, 1)}, aes(color = 'prior')) +
  lims(x = c(0,5)) +  xlab(TeX("$\\log_{10}(\\s)$")) + theme(text = element_text(size=23))     #p




# phi
phi_TIV <-  posterior_sample_table_TIV$phi
phi_IR_Sim <- posterior_sample_table_IR_Sim$phi

phi.df <- data.frame(phi = c(phi_TIV, phi_IR_Sim), type = as.factor(rep(c('TIV', 'IR'), each = length(phi_IR_Sim))))
phi.mu<- ddply(phi.df, "type", summarise, grp.mean=mean(phi))
phi.median <- ddply(phi.df,"type", summarise, grp.median = quantile(phi, 0.5))


p.phi <- ggplot(phi.df, aes(x=phi, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = .01, binwidth = 1e-3)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=phi.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=phi.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p.phi +  stat_function(fun = function(x) {dnorm(x, 1, 1e+4)}, aes(color = 'prior')) +
  lims(x = c(0,.1)) +  xlab(TeX("$\\varphi$")) + theme(text = element_text(size=23))   #phi

# R0

R0_TIV <- rep(0,  n_iteration)
R0_IR <- rep(0, n_iteration)
com.TIV <- rep(0,n_iteration)
com.IR <- rep(0,n_iteration)

R0_TIV.KO <- rep(0, n_iteration)
R0_IR.KO <- rep(0, n_iteration)

for (i in 1:n_iteration){
  
  R0_TIV.KO[i] <- posterior_sample_table_TIV$p[i] * posterior_sample_table_TIV$beta[i] * T0 / (posterior_sample_table_TIV$delta_I[i] * (posterior_sample_table_TIV$delta_V[i] + posterior_sample_table_TIV$kappa_M[i] * posterior_sample_table_TIV$s[i]/ posterior_sample_table_TIV$delta_M[i]))
  R0_IR.KO[i] <-  posterior_sample_table_IR_Sim$p[i] * posterior_sample_table_IR_Sim$beta[i] * T0 / (posterior_sample_table_IR_Sim$delta_I[i] * (posterior_sample_table_IR_Sim$delta_V[i] + posterior_sample_table_IR_Sim$kappa_M[i] * posterior_sample_table_IR_Sim$s[i] / posterior_sample_table_IR_Sim$delta_M[i]))
  
  com.TIV[i] <- posterior_sample_table_TIV$epsilon1[i]/ (posterior_sample_table_TIV$I_50[i] * posterior_sample_table_TIV$delta_I[i])
  com.IR[i] <- posterior_sample_table_IR_Sim$epsilon1[i]/ (posterior_sample_table_IR_Sim$I_50[i] * posterior_sample_table_IR_Sim$delta_I[i])
  
  R0_TIV[i] <- 1/4 * (-com.TIV[i] + sqrt(com.TIV[i]^2 + 4* R0_TIV.KO[i]))^2
  R0_IR[i] <- 1/4 * (-com.IR[i] + sqrt(com.IR[i]^2 + 4 * R0_IR.KO[i]))^2
  
  }
quantile(R0_TIV, c(0.025,0.5,0.975))
quantile(R0_TIV.KO, c(0.025,0.5,0.975))

quantile(R0_IR, c(0.025,0.5,0.975))
quantile(R0_IR.KO, c(0.025,0.5,0.975))

R0.df <- data.frame(R0 = c(R0_TIV, R0_IR), type = as.factor(rep(c('TIV', 'IR'), each = length(phi_IR_Sim))))
R0.mu<- ddply(R0.df, "type", summarise, grp.mean=mean(R0))

p.R0 <- ggplot(R0.df, aes(x=R0, fill=type, color = type)) +
  geom_histogram(aes(y = ..density..), position="dodge", alpha = .4, binwidth = 1)+
  theme(legend.position="top")+
  geom_vline(aes(xintercept=R0.mu$grp.mean[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=R0.mu$grp.mean[2]),
             linetype="dashed",color = 'blue') +
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 


p.R0 +  lims(x = c(0,100)) + xlab('R0') + theme(text = element_text(size=15))  #R0


# r

r_TIV <- rep(0, n_iteration)
component.1 <- rep(0,n_iteration)
component.2 <- rep(0,n_iteration) 
r_IR <- rep(0, n_iteration)
for (i in 1:n_iteration){
  component.1[i] <- posterior_sample_table_TIV$delta_I[i] + posterior_sample_table_TIV$delta_V[i] + posterior_sample_table_TIV$kappa_M[i] * posterior_sample_table_TIV$s[i]/posterior_sample_table_TIV$delta_M[i]
  component.2[i] <- 4 * posterior_sample_table_TIV$delta_I[i] * (posterior_sample_table_TIV$delta_V[i] + posterior_sample_table_TIV$kappa_M[i] * posterior_sample_table_TIV$s[i]/posterior_sample_table_TIV$delta_M[i])
  r_TIV[i] <- (-component.1[i] + sqrt(component.1[i]^2 - component.2[i] * (1 - R0_TIV.KO[i])))/2
  
  component.1[i] <- posterior_sample_table_IR_Sim$delta_I[i] + posterior_sample_table_IR_Sim$delta_V[i] + posterior_sample_table_IR_Sim$kappa_M[i] * posterior_sample_table_IR_Sim$s[i]/posterior_sample_table_IR_Sim$delta_M[i]
  component.2[i] <- 4 * posterior_sample_table_IR_Sim$delta_I[i] * (posterior_sample_table_IR_Sim$delta_V[i] + posterior_sample_table_IR_Sim$kappa_M[i] * posterior_sample_table_IR_Sim$s[i]/posterior_sample_table_IR_Sim$delta_M[i])
  r_IR[i] <- (-component.1[i] + sqrt(component.1[i]^2 - component.2[i] * (1 - R0_IR.KO[i])))/2
}

quantile(r_TIV, c(0.025,0.5,0.975))
quantile(r_IR, c(0.025,0.5,0.975))





# Model simulation starts here 

TIV_model = function(t, y, theta){
  
  dydt1 =  0.8 * y[1] * (1 - (y[1] + y[2])/ 1e+7) - (1 - theta[1] ) * theta[2] * y[1] * y[3];
  dydt2 =  (1 - theta[1]) * theta[2] * y[1] * y[3] - theta[3] * y[2];
  dydt3 =  theta[4] * y[2] - theta[5] * y[3] - theta[6] * y[4] * y[3];
  dydt4 =  theta[10] + (1 - theta[7] ) * theta[9] * y[2] - theta[8] * y[4];
  
  list(c(dydt1, dydt2, dydt3, dydt4))
}


IR_Sim_model = function(t, y, theta){
  
  dydt1 =  0.8 * y[1] * (1 - (y[1] + y[2])/ 1e+7) - (1 - theta[1]) * theta[2] * y[1] * y[3];
  dydt2 =  (1 - theta[1]) * theta[2] * y[1] * y[3] - theta[3] * y[2] - 5e-5 * y[11] * y[2];
  dydt3 =  theta[4] * y[2] - theta[5] * y[3] - theta[6] * y[4] * y[3] - 0.8 * y[19] * y[3] - 0.4 * y[20] * y[3];
  dydt4 =  theta[10] + (1 - theta[7] ) * theta[9] * y[2] - theta[8] * y[4];
  dydt5 = -10*y[3]/(y[3] + 1e+4) * y[5];
  dydt6 =  10*y[3]/(y[3] + 1e+4) * y[5] - 5 * 1.0 / 8 * y[6];
  dydt7 =  5 * 1.0 / 8 * (y[6] - y[7]);
  dydt8 =  5 * 1.0 / 8 * (y[7] - y[8]);
  dydt9 =  5 * 1.0 / 8 * (y[8] - y[9]);
  dydt10 =  5 * 1.0 / 8 * (y[9] - y[10]);
  dydt11 = 1400 * 5 * 1.0 / 8 * y[10] - 0.57 * y[11];
  dydt12 = -0.06 * y[3]/(y[3] + 1e+4) * y[12];
  dydt13 = 0.06 * y[3]/(y[3] + 1e+4) * y[12] - 5 * 1.0 / 8 * y[13];
  dydt14 = 5 * 1.0 / 8 * (y[13] - y[14])
  dydt15 = 5 * 1.0 / 8 * (y[14] - y[15])
  dydt16 = 5 * 1.0 / 8 * (y[15] - y[16])
  dydt17 = 5 * 1.0 / 8 * (y[16] - y[17])
  dydt18 = 8 * 5 * 1.0 / 8 * y[17] - 0.5 * y[18];
  dydt19 = 12 * y[18] - 2 * y[19]; 
  dydt20 = 2 * y[18] - 0.015 * y[20];
  
  list(c(dydt1,dydt2,dydt3,dydt4,dydt5,dydt6,dydt7,dydt8,dydt9,dydt10,
         dydt11,dydt12,dydt13,dydt14,dydt15,dydt16,dydt17,dydt18,dydt19,dydt20))
}

n_chains <- 4
n_iteration <-  n_chains*1000
n_iteration2 <- n_chains*1000
ts <-  seq(0, 10, 0.1)

V.TIV.WT <-  matrix(, nrow = n_iteration, ncol = length(ts))
V.IR.WT <-  matrix(, nrow = n_iteration, ncol = length(ts))
M.TIV.WT = matrix(, nrow = n_iteration, ncol = length(ts))
M.IR.WT = matrix(, nrow = n_iteration, ncol = length(ts))

V.TIV.KO <-  matrix(, nrow = n_iteration, ncol = length(ts))
V.IR.KO <-  matrix(, nrow = n_iteration, ncol = length(ts))
M.TIV.KO <-  matrix(, nrow = n_iteration, ncol = length(ts))
M.IR.KO <-  matrix(, nrow = n_iteration, ncol = length(ts))

V.TIV.WT.Low <- ts
V.TIV.WT.med <- ts
V.TIV.WT.upp <- ts

V.IR.WT.Low <- ts
V.IR.WT.med <- ts
V.IR.WT.upp <- ts

M.TIV.WT.Low <- ts
M.TIV.WT.med <- ts
M.TIV.WT.upp <- ts

M.IR.WT.Low <- ts
M.IR.WT.med <- ts
M.IR.WT.upp <- ts



V.TIV.KO.Low <- ts
V.TIV.KO.med <- ts
V.TIV.KO.upp <- ts

V.IR.KO.Low <- ts
V.IR.KO.med <- ts
V.IR.KO.upp <- ts

M.TIV.KO.Low <- ts
M.TIV.KO.med <- ts
M.TIV.KO.upp <- ts

M.IR.KO.Low <- ts
M.IR.KO.med <- ts
M.IR.KO.upp <- ts


# matrix for comparing kappa*M*V  and delta_V
M.contribution.TIV.WT <- matrix(, nrow = n_iteration, ncol = length(ts))
M.contribution.TIV.KO <- matrix(, nrow = n_iteration, ncol = length(ts))
M.contribution.IR.WT <- matrix(, nrow = n_iteration, ncol = length(ts))
M.contribution.IR.KO <- matrix(, nrow = n_iteration, ncol = length(ts))

###
V.natural.decay.TIV.WT <- matrix(, nrow = n_iteration, ncol = length(ts))
V.natural.decay.TIV.KO <- matrix(, nrow = n_iteration, ncol = length(ts))
V.natural.decay.IR.WT <- matrix(, nrow = n_iteration, ncol = length(ts))
V.natural.decay.IR.KO <- matrix(, nrow = n_iteration, ncol = length(ts))

###
M.contribution.WT.TIV.Low <- ts
M.contribution.WT.TIV.med <- ts
M.contribution.WT.TIV.upp <- ts

M.contribution.WT.IR.Low <- ts
M.contribution.WT.IR.med <- ts
M.contribution.WT.IR.upp <- ts

M.contribution.KO.TIV.Low <- ts
M.contribution.KO.TIV.med <- ts
M.contribution.KO.TIV.upp <- ts

M.contribution.KO.IR.Low <- ts
M.contribution.KO.IR.med <- ts
M.contribution.KO.IR.upp <- ts

###
V.natural.decay.WT.TIV.Low <- ts
V.natural.decay.WT.TIV.med <- ts
V.natural.decay.WT.TIV.upp <- ts

V.natural.decay.WT.IR.Low <- ts
V.natural.decay.WT.IR.med <- ts
V.natural.decay.WT.IR.upp <- ts

V.natural.decay.KO.TIV.Low <- ts
V.natural.decay.KO.TIV.med <- ts
V.natural.decay.KO.TIV.upp <- ts

V.natural.decay.KO.IR.Low <- ts
V.natural.decay.KO.IR.med <- ts
V.natural.decay.KO.IR.upp <- ts

for (i in 1:n_iteration){
  y_init_TIV = c(data_combined_muc1_TIV$T0, data_combined_muc1_TIV$I0, data_combined_muc1_TIV$V0, posterior_sample_table_TIV$s[i]/posterior_sample_table_TIV$delta_M[i])
  
  TIV_para_WT = c(posterior_sample_table_TIV$epsilon1[i],
                posterior_sample_table_TIV$beta[i], 
                posterior_sample_table_TIV$delta_I[i], 
                posterior_sample_table_TIV$p[i], 
                posterior_sample_table_TIV$delta_V[i],
                posterior_sample_table_TIV$kappa_M[i],
                posterior_sample_table_TIV$epsilon2[i],
                posterior_sample_table_TIV$delta_M[i],
                posterior_sample_table_TIV$phi[i],
                posterior_sample_table_TIV$s[i])
  
  TIV_para_KO = c(0,
                    posterior_sample_table_TIV$beta[i], 
                    posterior_sample_table_TIV$delta_I[i], 
                    posterior_sample_table_TIV$p[i], 
                    posterior_sample_table_TIV$delta_V[i],
                    posterior_sample_table_TIV$kappa_M[i],
                    0,
                    posterior_sample_table_TIV$delta_M[i],
                    posterior_sample_table_TIV$phi[i],
                    posterior_sample_table_TIV$s[i])
  
  TIV_output_WT = ode(times = ts, y = y_init_TIV, func = TIV_model, parms = TIV_para_WT, method = "bdf")
  TIV_output_KO = ode(times = ts, y = y_init_TIV, func = TIV_model, parms = TIV_para_KO, method = "bdf")
  
  V.TIV.WT[i,] = TIV_output_WT[,4]
  M.TIV.WT[i,] = TIV_output_WT[,5] 
  
  V.TIV.KO[i,] = TIV_output_KO[,4]
  M.TIV.KO[i,] = TIV_output_KO[,5]

  
  
  M.contribution.TIV.WT[i,] = posterior_sample_table_TIV$kappa_M[i] * M.TIV.WT[i,] / (posterior_sample_table_TIV$kappa_M[i] * M.TIV.WT[i,] + posterior_sample_table_TIV$delta_V[i]) 
  M.contribution.TIV.KO[i,] = posterior_sample_table_TIV$kappa_M[i] * M.TIV.KO[i,] / (posterior_sample_table_TIV$kappa_M[i] * M.TIV.KO[i,] + posterior_sample_table_TIV$delta_V[i]) 
  V.natural.decay.TIV.WT[i,] = posterior_sample_table_TIV$delta_V[i] 
  V.natural.decay.TIV.KO[i,] = posterior_sample_table_TIV$delta_V[i] 
  
  
  y_init_IR = c(data_combined_muc1_TIV$T0, data_combined_muc1_TIV$I0, data_combined_muc1_TIV$V0, posterior_sample_table_IR_Sim$s[i]/posterior_sample_table_IR_Sim$delta_M[i], 100, 0,0,0,0,0,0,100,0,0,0,0,0,0,0,0)
  
  IR_para_WT = c(posterior_sample_table_IR_Sim$epsilon1[i],
                  posterior_sample_table_IR_Sim$beta[i], 
                  posterior_sample_table_IR_Sim$delta_I[i], 
                  posterior_sample_table_IR_Sim$p[i], 
                  posterior_sample_table_IR_Sim$delta_V[i],
                  posterior_sample_table_IR_Sim$kappa_M[i],
                  posterior_sample_table_IR_Sim$epsilon2[i],
                  posterior_sample_table_IR_Sim$delta_M[i],
                  posterior_sample_table_IR_Sim$phi[i],
                  posterior_sample_table_IR_Sim$s[i])
  
  IR_para_KO = c(0,
                  posterior_sample_table_IR_Sim$beta[i], 
                  posterior_sample_table_IR_Sim$delta_I[i], 
                  posterior_sample_table_IR_Sim$p[i], 
                  posterior_sample_table_IR_Sim$delta_V[i],
                  posterior_sample_table_IR_Sim$kappa_M[i],
                  0,
                  posterior_sample_table_IR_Sim$delta_M[i],
                  posterior_sample_table_IR_Sim$phi[i],
                  posterior_sample_table_IR_Sim$s[i])
  
  IR_output_WT = ode(times = ts, y = y_init_IR, func = IR_Sim_model, parms = IR_para_WT, method = "bdf")
  IR_output_KO = ode(times = ts, y = y_init_IR, func = IR_Sim_model, parms = IR_para_KO, method = "bdf")
  
  V.IR.WT[i,] = IR_output_WT[,4]
  M.IR.WT[i,] = IR_output_WT[,5] 
  
  V.IR.KO[i,] = IR_output_KO[,4]
  M.IR.KO[i,] = IR_output_KO[,5]
  
  M.contribution.IR.WT[i,] = posterior_sample_table_IR_Sim$kappa_M[i] * M.IR.WT[i,] / (posterior_sample_table_IR_Sim$kappa_M[i] * M.IR.WT[i,]  + posterior_sample_table_IR_Sim$delta_V[i]) 
  M.contribution.IR.KO[i,] = posterior_sample_table_IR_Sim$kappa_M[i] * M.IR.KO[i,] / (posterior_sample_table_IR_Sim$kappa_M[i] * M.IR.KO[i,]  + posterior_sample_table_IR_Sim$delta_V[i]) 
  V.natural.decay.IR.WT[i,] = posterior_sample_table_IR_Sim$delta_V[i] 
  V.natural.decay.IR.KO[i,] = posterior_sample_table_IR_Sim$delta_V[i]
  
}





for (i in 1:length(ts)){
  temp.V.WT.TIV = unname(quantile(V.TIV.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.V.KO.TIV = unname(quantile(V.TIV.KO[,i], probs = c(0.025, 0.5, 0.975)))
  temp.V.WT.IR = unname(quantile(V.IR.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.V.KO.IR = unname(quantile(V.IR.KO[,i], probs = c(0.025, 0.5, 0.975)))
  
  temp.M.WT.TIV = unname(quantile(M.TIV.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.M.KO.TIV = unname(quantile(M.TIV.KO[,i], probs = c(0.025, 0.5, 0.975)))
  temp.M.WT.IR = unname(quantile(M.IR.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.M.KO.IR = unname(quantile(M.IR.KO[,i], probs = c(0.025, 0.5, 0.975)))
  
  
  V.TIV.WT.Low[i] = temp.V.WT.TIV[1]
  V.TIV.WT.med[i] = temp.V.WT.TIV[2]
  V.TIV.WT.upp[i] = temp.V.WT.TIV[3]
  
  V.TIV.KO.Low[i] = temp.V.KO.TIV[1]
  V.TIV.KO.med[i] = temp.V.KO.TIV[2]
  V.TIV.KO.upp[i] = temp.V.KO.TIV[3]
  
  V.IR.WT.Low[i] = temp.V.WT.IR[1]
  V.IR.WT.med[i] = temp.V.WT.IR[2]
  V.IR.WT.upp[i] = temp.V.WT.IR[3]
  
  V.IR.KO.Low[i] = temp.V.KO.IR[1]
  V.IR.KO.med[i] = temp.V.KO.IR[2]
  V.IR.KO.upp[i] = temp.V.KO.IR[3]
  
  
  
  M.TIV.WT.Low[i] = temp.M.WT.TIV[1]
  M.TIV.WT.med[i] = temp.M.WT.TIV[2]
  M.TIV.WT.upp[i] = temp.M.WT.TIV[3]

  M.TIV.KO.Low[i] = temp.M.KO.TIV[1]
  M.TIV.KO.med[i] = temp.M.KO.TIV[2]
  M.TIV.KO.upp[i] = temp.M.KO.TIV[3]
  
  M.IR.WT.Low[i] = temp.M.WT.IR[1]
  M.IR.WT.med[i] = temp.M.WT.IR[2]
  M.IR.WT.upp[i] = temp.M.WT.IR[3]
  
  M.IR.KO.Low[i] = temp.M.KO.IR[1]
  M.IR.KO.med[i] = temp.M.KO.IR[2]
  M.IR.KO.upp[i] = temp.M.KO.IR[3]
}




V.data <-  data.frame(time = rep(c(1,2,3,5,7), each = 5),
                       V_WT = log10(exp(data_combined_muc1_TIV$log_viral_load_data_WT)),
                       V_KO = log10(exp(data_combined_muc1_TIV$log_viral_load_data_KO)))

V.fit.WT <- data.frame(time = ts, V.WT = c(V.TIV.WT.med, V.IR.WT.med), V.WT.low = c(V.TIV.WT.Low, V.IR.WT.Low), V.WT.upp = c(V.TIV.WT.upp, V.IR.WT.upp), model = rep(c('TIV', 'IR'), each = length(V.TIV.WT.med)))
V.fit.KO <- data.frame(time = ts, V.KO = c(V.TIV.KO.med, V.IR.KO.med), V.KO.low = c(V.TIV.KO.Low, V.IR.KO.Low), V.KO.upp = c(V.TIV.KO.upp, V.IR.KO.upp),model = rep(c('TIV', 'IR'), each = length(V.TIV.KO.med)))

ggplot(V.fit.WT, aes(time))+
  geom_point(data = V.data, aes(time, V_WT), size = 3) +
  geom_line(data = V.fit.WT, aes(time, log10(V.WT), color = model), size = 1) +
  geom_ribbon(aes(ymin = log10(V.WT.low), ymax = log10(V.WT.upp), fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("Viral load (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"), legend.position = "top") + 
  scale_color_manual(values = wes_palette("GrandBudapest1", n = 4)) + 
  scale_fill_manual(values = wes_palette("GrandBudapest1", n = 4)) 


ggplot(V.fit.KO, aes(time))+
  geom_point(data = V.data, aes(time, V_KO), size = 3) +
  geom_line(data = V.fit.KO, aes(time, log10(V.KO), color = model), size = 1) +
  geom_ribbon(aes(ymin = log10(V.KO.low), ymax = log10(V.KO.upp), fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("Viral load (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"), legend.position = "top") + 
  scale_color_manual(values = wes_palette("GrandBudapest1", n = 4)) + 
  scale_fill_manual(values = wes_palette("GrandBudapest1", n = 4)) 



M.data.WT <-  data.frame(time = rep(c(1,3,5,7), c(5,5,5,4)),
                            M_WT = log10(exp(data_combined_muc1_TIV$Macrophage_data_WT)))

M.fit.WT <- data.frame(time = ts, M.WT = c(M.TIV.WT.med, M.IR.WT.med), M.WT.low = c(M.TIV.WT.Low, M.IR.WT.Low), M.WT.upp = c(M.TIV.WT.upp, M.IR.WT.upp), model = rep(c('TIV', 'IR'), each = length(M.TIV.WT.med)))
ggplot(M.fit.WT, aes(time))+
  geom_point(data = M.data.WT, aes(time, M_WT), size = 3) +
  geom_line(data = M.fit.WT, aes(time, log10(M.WT), color = model), size = 1) +
  geom_ribbon(aes(ymin = log10(M.WT.low), ymax = log10(M.WT.upp), fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("Macrophages (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"), legend.position = "top") + 
  scale_color_manual(values = wes_palette("GrandBudapest1", n = 4)) + 
  scale_fill_manual(values = wes_palette("GrandBudapest1", n = 4)) 





M.data.KO <-  data.frame(time = rep(c(1,3,5,7), c(5,4,5,6)),
                            M_KO = log10(exp(data_combined_muc1_TIV$Macrophage_data_KO)))



M.fit.KO <- data.frame(time = ts, M.KO = c(M.TIV.KO.med, M.IR.KO.med), M.KO.low = c(M.TIV.KO.Low, M.IR.KO.Low), M.KO.upp = c(M.TIV.KO.upp, M.IR.KO.upp), model = rep(c('TIV', 'IR'), each = length(M.TIV.WT.med)))
ggplot(M.fit.KO, aes(time))+
  geom_point(data = M.data.KO, aes(time, M_KO), size = 3) +
  geom_line(data = M.fit.KO, aes(time, log10(M.KO), color = model), size = 1) +
  geom_ribbon(aes(ymin = log10(M.KO.low), ymax = log10(M.KO.upp), fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("Macrophages (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"), legend.position = "top") + 
  scale_color_manual(values = wes_palette("GrandBudapest1", n = 4)) + 
  scale_fill_manual(values = wes_palette("GrandBudapest1", n = 4)) 











for (i in 1:length(ts)){
  temp.M.contribution.WT.TIV = unname(quantile(M.contribution.TIV.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.M.contribution.KO.TIV = unname(quantile(M.contribution.TIV.KO[,i], probs = c(0.025, 0.5, 0.975)))
  temp.M.contribution.WT.IR = unname(quantile(M.contribution.IR.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.M.contribution.KO.IR = unname(quantile(M.contribution.IR.KO[,i], probs = c(0.025, 0.5, 0.975)))
  
  temp.V.natural.decay.WT.TIV = unname(quantile(V.natural.decay.TIV.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.V.natural.decay.KO.TIV = unname(quantile(V.natural.decay.TIV.KO[,i], probs = c(0.025, 0.5, 0.975)))
  temp.V.natural.decay.WT.IR = unname(quantile(V.natural.decay.IR.WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp.V.natural.decay.KO.IR = unname(quantile(V.natural.decay.IR.KO[,i], probs = c(0.025, 0.5, 0.975)))
  
  
  M.contribution.WT.TIV.Low[i] = temp.M.contribution.WT.TIV[1]
  M.contribution.WT.TIV.med[i] = temp.M.contribution.WT.TIV[2]
  M.contribution.WT.TIV.upp[i] = temp.M.contribution.WT.TIV[3]
  
  M.contribution.KO.TIV.Low[i] = temp.M.contribution.KO.TIV[1]
  M.contribution.KO.TIV.med[i] = temp.M.contribution.KO.TIV[2]
  M.contribution.KO.TIV.upp[i] = temp.M.contribution.KO.TIV[3]
  
  M.contribution.WT.IR.Low[i] = temp.M.contribution.WT.IR[1]
  M.contribution.WT.IR.med[i] = temp.M.contribution.WT.IR[2]
  M.contribution.WT.IR.upp[i] = temp.M.contribution.WT.IR[3]
  
  M.contribution.KO.IR.Low[i] = temp.M.contribution.KO.IR[1]
  M.contribution.KO.IR.med[i] = temp.M.contribution.KO.IR[2]
  M.contribution.KO.IR.upp[i] = temp.M.contribution.KO.IR[3]
  
  
  
  V.natural.decay.WT.TIV.Low[i] = temp.V.natural.decay.WT.TIV[1]
  V.natural.decay.WT.TIV.med[i] = temp.V.natural.decay.WT.TIV[2]
  V.natural.decay.WT.TIV.upp[i] = temp.V.natural.decay.WT.TIV[3]
  
  V.natural.decay.KO.TIV.Low[i] = temp.V.natural.decay.KO.TIV[1]
  V.natural.decay.KO.TIV.med[i] = temp.V.natural.decay.KO.TIV[2]
  V.natural.decay.KO.TIV.upp[i] = temp.V.natural.decay.KO.TIV[3]
  
  V.natural.decay.WT.IR.Low[i] = temp.V.natural.decay.WT.IR[1]
  V.natural.decay.WT.IR.med[i] = temp.V.natural.decay.WT.IR[2]
  V.natural.decay.WT.IR.upp[i] = temp.V.natural.decay.WT.IR[3]
  
  V.natural.decay.KO.IR.Low[i] = temp.V.natural.decay.KO.IR[1]
  V.natural.decay.KO.IR.med[i] = temp.V.natural.decay.KO.IR[2]
  V.natural.decay.KO.IR.upp[i] = temp.V.natural.decay.KO.IR[3]
  
}


M.contribution <- data.frame(time = ts, contribution = c(M.contribution.WT.TIV.med, M.contribution.WT.IR.med), contribution.low = c(M.contribution.WT.TIV.Low, M.contribution.WT.IR.Low), contribution.upp = c(M.contribution.WT.TIV.upp, M.contribution.WT.IR.upp), model = rep(c('TIV', 'IR'), each = length(M.contribution.WT.TIV.med)))

ggplot(M.contribution, aes(time))+
  geom_line(data = M.contribution, aes(time, contribution, color = model), size = 1) +
  geom_ribbon(aes(ymin = contribution.low, ymax = contribution.upp, fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_classic() + 
  theme(text = element_text(size = 20)) + 
  xlab('Day post infection (p.i.)') + ylab('Ratio of viral clearance by macrophages')






M.contribution.KO <- data.frame(time = ts, contribution = c(M.contribution.KO.TIV.med, M.contribution.KO.IR.med), contribution.low = c(M.contribution.KO.TIV.Low, M.contribution.KO.IR.Low), contribution.upp = c(M.contribution.KO.TIV.upp, M.contribution.KO.IR.upp), model = rep(c('TIV', 'IR'), each = length(M.contribution.KO.TIV.med)))

ggplot(M.contribution.KO, aes(time))+
  geom_line(data = M.contribution, aes(time, contribution, color = model), size = 1) +
  geom_ribbon(aes(ymin = contribution.low, ymax = contribution.upp, fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_classic() + 
  theme(text = element_text(size = 20))




contribution.compare.plot.TIV.WT <- data.frame(time = ts, contribution = c(M.contribution.WT.TIV.med, V.natural.decay.WT.TIV.med), contribution.low = c(M.contribution.WT.TIV.Low, V.natural.decay.WT.TIV.Low), contribution.upp = c(M.contribution.WT.TIV.upp, V.natural.decay.WT.TIV.upp), components = rep(c('kappa_M * M ', 'delta_V'), each = length(M.contribution.WT.TIV.med)))

ggplot(contribution.compare.plot.TIV.WT, aes(time))+
  geom_line(data = contribution.compare.plot.TIV.WT, aes(time, contribution, color = components), size = 1) +
  geom_ribbon(aes(ymin = contribution.low, ymax = contribution.upp, fill = components), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 20))


contribution.compare.plot.IR.WT <- data.frame(time = ts, contribution = c(M.contribution.WT.IR.med, V.natural.decay.WT.IR.med), contribution.low = c(M.contribution.WT.IR.Low, V.natural.decay.WT.IR.Low), contribution.upp = c(M.contribution.WT.IR.upp, V.natural.decay.WT.IR.upp), components = rep(c('kappa_M * M ', 'delta_V '), each = length(M.contribution.WT.IR.med)))
ggplot(contribution.compare.plot.IR.WT, aes(time))+
  geom_line(data = contribution.compare.plot.IR.WT, aes(time, contribution, color = components), size = 1) +
  geom_ribbon(aes(ymin = contribution.low, ymax = contribution.upp, fill = components), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 20))



contribution.compare.plot.TIV.KO <- data.frame(time = ts, contribution = c(M.contribution.KO.TIV.med, V.natural.decay.KO.TIV.med), contribution.low = c(M.contribution.KO.TIV.Low, V.natural.decay.KO.TIV.Low), contribution.upp = c(M.contribution.KO.TIV.upp, V.natural.decay.KO.TIV.upp), model = rep(c('kappa_M * M ', 'delta_V '), each = length(M.contribution.WT.TIV.med)))

ggplot(contribution.compare.plot.TIV.KO, aes(time))+
  geom_line(data = contribution.compare.plot.TIV.KO, aes(time, contribution, color = model), size = 1) +
  geom_ribbon(aes(ymin = contribution.low, ymax = contribution.upp, fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 20))


contribution.compare.plot.IR.KO <- data.frame(time = ts, contribution = c(M.contribution.KO.IR.med, V.natural.decay.KO.IR.med), contribution.low = c(M.contribution.KO.IR.Low, V.natural.decay.KO.IR.Low), contribution.upp = c(M.contribution.KO.IR.upp, V.natural.decay.KO.IR.upp), model = rep(c('kappa_M * M ', 'delta_V '), each = length(M.contribution.WT.IR.med)))
ggplot(contribution.compare.plot.IR.KO, aes(time))+
  geom_line(data = contribution.compare.plot.IR.KO, aes(time, contribution, color = model), size = 1) +
  geom_ribbon(aes(ymin = contribution.low, ymax = contribution.upp, fill = model), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 20))



R0_TIV <- rep(0,n_iteration)
R0_TIV_no_M <- rep(0,n_iteration)
R0_IR <- rep(0,n_iteration)
R0_IR_no_M <- rep(0,n_iteration)
for (i in 1:n_iteration){
  R0_TIV[i] <- posterior_sample_table_TIV$p[i] * posterior_sample_table_TIV$beta[i] * 1e+7 / (posterior_sample_table_TIV$delta_I[i] * (posterior_sample_table_TIV$delta_V[i] + posterior_sample_table_TIV$kappa_M[i] * 330 / posterior_sample_table_TIV$delta_M[i]))
  R0_TIV_no_M[i] <- posterior_sample_table_TIV$p[i] * posterior_sample_table_TIV$beta[i] * 1e+7 / (posterior_sample_table_TIV$delta_I[i] * (posterior_sample_table_TIV$delta_V[i] + 0 * 330 / posterior_sample_table_TIV$delta_M[i]))
  
  R0_IR[i] <- posterior_sample_table_IR_Sim$p[i] * posterior_sample_table_IR_Sim$beta[i] * 1e+7 / (posterior_sample_table_IR_Sim$delta_I[i] * (posterior_sample_table_IR_Sim$delta_V[i] + posterior_sample_table_IR_Sim$kappa_M[i] * 330 / posterior_sample_table_IR_Sim$delta_M[i]))
  R0_IR_no_M[i] <- posterior_sample_table_IR_Sim$p[i] * posterior_sample_table_IR_Sim$beta[i] * 1e+7 / (posterior_sample_table_IR_Sim$delta_I[i] * (posterior_sample_table_IR_Sim$delta_V[i] + 0 * 330 / posterior_sample_table_IR_Sim$delta_M[i]))
  
}


R0.df <- data.frame(R0 = c(R0_TIV, R0_IR), model = rep(c('TIV','IR'), each = n_iteration))
R0.median <- ddply(R0.df,"model", summarise, grp.median = quantile(R0, 0.5))

R0.plot <- ggplot(R0.df, aes(x=R0, color=model, fill = model)) +
  geom_histogram(aes(y = ..density..), position="dodge", alpha = .2, binwidth = 5)+
  theme(legend.position="top")+
  #scale_color_grey()+scale_fill_grey() + 
  geom_vline(aes(xintercept=R0.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=R0.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  theme_classic() 
R0.plot

R0.TIV.df <- data.frame(R0_TIV = c(R0_TIV, R0_TIV_no_M), model = rep(c('Y','N'), each = n_iteration))
R0.TIV.median <- ddply(R0.TIV.df,"model", summarise, grp.median = quantile(R0_TIV, 0.5))
R0.TIV.plot <- ggplot(R0.TIV.df, aes(x=R0_TIV, color=model, fill = model)) +
  geom_histogram(aes(y = ..density..), position="dodge", alpha = .1, binwidth = 3)+
  theme(legend.position="top")+
  #scale_color_grey()+scale_fill_grey() + 
  geom_vline(aes(xintercept=R0.TIV.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=R0.TIV.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  theme_classic() 
R0.TIV.plot


R0.IR.df <- data.frame(R0_IR = c(R0_IR, R0_IR_no_M), model = rep(c('Y','N'), each = n_iteration))
R0.IR.median <- ddply(R0.IR.df,"model", summarise, grp.median = quantile(R0_IR, 0.5))
R0.IR.plot <- ggplot(R0.IR.df, aes(x=R0_IR, color=model, fill = model)) +
  geom_histogram(aes(y = ..density..), position="dodge", alpha = .1, binwidth = 3)+
  theme(legend.position="top")+
  #scale_color_grey()+scale_fill_grey() + 
  geom_vline(aes(xintercept=R0.IR.median$grp.median[1]),
             linetype="dashed",color = 'red') +
  geom_vline(aes(xintercept=R0.IR.median$grp.median[2]),
             linetype="dashed",color = 'blue') +
  theme_classic() 
R0.IR.plot


# Bayes factor 
#install.packages("bridgesampling")
library(bridgesampling)

bridge_H1 <- bridge_sampler(fit_Model_TIV)
bridge_H2 <- bridge_sampler(fit_Model_IR)

Bayes.factor <-  bf(bridge_H1, bridge_H2)

Err1 <- error_measures(bridge_H1)$percentage
Err2 <- error_measures(bridge_H2)$percentage

bayesfactor_parameters(fit_M1)



############### ========= #################


# matrix for comparing R_eff
R_eff.TIV <- matrix(, nrow = n_iteration, ncol = length(ts))
R_eff.TIV.no.M <- matrix(, nrow = n_iteration, ncol = length(ts))
V <- matrix(, nrow = n_iteration, ncol = length(ts))
M <- matrix(, nrow = n_iteration, ncol = length(ts))
Ep <- matrix(, nrow = n_iteration, ncol = length(ts))
I <- matrix(, nrow = n_iteration, ncol = length(ts))

###
R_eff.TIV.Low <- ts
R_eff.TIV.med <- ts
R_eff.TIV.upp <- ts

R_eff.TIV.no.M.Low <- ts
R_eff.TIV.no.M.med <- ts
R_eff.TIV.no.M.upp <- ts



for (i in 1:n_iteration){
  y_init_TIV = c(data_combined_muc1_TIV$T0, data_combined_muc1_TIV$I0, data_combined_muc1_TIV$V0, posterior_sample_table_TIV$s[i]/posterior_sample_table_TIV$delta_M[i])
  
  TIV_para_WT = c(posterior_sample_table_TIV$epsilon1[i],
                  posterior_sample_table_TIV$beta[i], 
                  posterior_sample_table_TIV$delta_I[i], 
                  posterior_sample_table_TIV$p[i], 
                  posterior_sample_table_TIV$delta_V[i],
                  posterior_sample_table_TIV$kappa_M[i],
                  posterior_sample_table_TIV$epsilon2[i],
                  posterior_sample_table_TIV$delta_M[i],
                  posterior_sample_table_TIV$phi[i],
                  posterior_sample_table_TIV$I_50[i])
  
 
  
  TIV_output_WT = ode(times = ts, y = y_init_TIV, func = TIV_model, parms = TIV_para_WT, method = "bdf")
  
  V[i,] = TIV_output_WT[,4]
  M[i,] = TIV_output_WT[,5] 
  Ep[i,] = TIV_output_WT[,2]
  I[i,] = TIV_output_WT[,3]
  
  R_eff.TIV[i,] = (posterior_sample_table_TIV$p[i] * posterior_sample_table_TIV$beta[i] * Ep[i,] * (1 - posterior_sample_table_TIV$epsilon1[i] * I[i,]/(I[i,] + posterior_sample_table_TIV$I_50[i]))) / (posterior_sample_table_TIV$delta_I[i] * (posterior_sample_table_TIV$delta_V[i] + posterior_sample_table_TIV$kappa_M[i] * M[i,]))
  R_eff.TIV.no.M[i,] = (posterior_sample_table_TIV$p[i] * posterior_sample_table_TIV$beta[i] * Ep[i,] * (1 - posterior_sample_table_TIV$epsilon1[i] * I[i,]/(I[i,] + posterior_sample_table_TIV$I_50[i]))) / (posterior_sample_table_TIV$delta_I[i] * (posterior_sample_table_TIV$delta_V[i] + 0 * M[i,]))
  
  
}



for (i in 1:length(ts)){
  temp.Reff = unname(quantile(R_eff.TIV[,i], probs = c(0.025, 0.5, 0.975)))
  temp.Reff.no.M = unname(quantile(R_eff.TIV.no.M[,i], probs = c(0.025, 0.5, 0.975)))
  
  
  R_eff.TIV.Low[i] = temp.Reff [1]
  R_eff.TIV.med[i] = temp.Reff [2]
  R_eff.TIV.upp[i] = temp.Reff [3]
  
  R_eff.TIV.no.M.Low[i] = temp.Reff.no.M[1]
  R_eff.TIV.no.M.med[i] = temp.Reff.no.M[2]
  R_eff.TIV.no.M.upp[i] = temp.Reff.no.M[3]
  
}



Reff.plot.TIV <- data.frame(time = ts, R_eff = c(R_eff.TIV.med, R_eff.TIV.no.M.med), Reff.low = c(R_eff.TIV.Low, R_eff.TIV.no.M.Low), Reff.upp = c(R_eff.TIV.upp, R_eff.TIV.no.M.upp), type = rep(c('Y', 'N'), each = length(R_eff.TIV.no.M.upp)))

ggplot(Reff.plot.TIV, aes(time))+
  geom_line(data = Reff.plot.TIV, aes(time, R_eff, color = type), size = 1) +
  geom_ribbon(aes(ymin = Reff.low, ymax = Reff.upp, fill = type), alpha = 0.2, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 20))  


